// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "erajaya/internal/model"

	mock "github.com/stretchr/testify/mock"

	utils "erajaya/pkg/utils"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: product
func (_m *ProductRepository) Create(product *model.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCachedProducts provides a mock function with given fields: ctx
func (_m *ProductRepository) DeleteCachedProducts(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCachedProducts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsByName provides a mock function with given fields: name
func (_m *ProductRepository) ExistsByName(name string) (bool, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByOrder provides a mock function with given fields: order
func (_m *ProductRepository) GetAllByOrder(order []utils.OrderParam) ([]model.Product, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByOrder")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func([]utils.OrderParam) ([]model.Product, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func([]utils.OrderParam) []model.Product); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func([]utils.OrderParam) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCachedProducts provides a mock function with given fields: ctx, sortParam
func (_m *ProductRepository) GetCachedProducts(ctx context.Context, sortParam string) ([]model.Product, error) {
	ret := _m.Called(ctx, sortParam)

	if len(ret) == 0 {
		panic("no return value specified for GetCachedProducts")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Product, error)); ok {
		return rf(ctx, sortParam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Product); ok {
		r0 = rf(ctx, sortParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sortParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCachedProducts provides a mock function with given fields: ctx, sortParam, products
func (_m *ProductRepository) SetCachedProducts(ctx context.Context, sortParam string, products []model.Product) error {
	ret := _m.Called(ctx, sortParam, products)

	if len(ret) == 0 {
		panic("no return value specified for SetCachedProducts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []model.Product) error); ok {
		r0 = rf(ctx, sortParam, products)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
